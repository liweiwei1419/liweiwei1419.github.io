(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{565:function(t,s,v){"use strict";v.r(s);var _=v(1),n=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("本节是对「回溯算法」的总结，把重点再和大家强调一下。")]),t._v(" "),s("h1",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("做题的时候，建议 "),s("strong",[t._v("先画树形图")]),t._v(" ，画图能帮助我们想清楚递归结构，想清楚如何剪枝。拿题目中的示例，想一想人是怎么做的，一般这样下来，这棵递归树都不难画出。")]),t._v(" "),s("p",[t._v("在画图的过程中思考清楚：")]),t._v(" "),s("ul",[s("li",[t._v("分支如何产生；")]),t._v(" "),s("li",[t._v("题目需要的解在哪里？是在叶子结点、还是在非叶子结点、还是在从跟结点到叶子结点的路径？")]),t._v(" "),s("li",[t._v("哪些搜索会产生不需要的解的？例如：产生重复是什么原因，如果在浅层就知道这个分支不能产生需要的结果，应该提前剪枝，剪枝的条件是什么，代码怎么写？")])])])}),[],!1,null,null,null);s.default=n.exports}}]);