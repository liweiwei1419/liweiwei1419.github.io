(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{855:function(t,a,s){"use strict";s.r(a);var i=s(1),l=Object(i.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"通过一个例子理解-dijkstra-算法的执行步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过一个例子理解-dijkstra-算法的执行步骤"}},[t._v("#")]),t._v(" 通过一个例子理解 Dijkstra 算法的执行步骤")]),t._v(" "),a("p",[t._v("最开始的样子，0 到自己路径最短，最短路径为 0，到其它顶点暂时认为是负无穷。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNgy1gxa96qs14gj319o0lsq4r.jpg",alt:"",loading:"lazy"}})]),t._v(" "),a("p",[t._v("从 0 出发的所有边中，到 2 的距离最短，因此我们就可以说 0 -> 2 这条边的长度，是从 0 开始到 2 的最短路径。\n同时更新从 0 出发到它的相邻顶点的距离。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNgy1gxa96s83fyj31fw0k6jtm.jpg",alt:"",loading:"lazy"}})]),t._v(" "),a("p",[t._v("接下来考察，从 2 出发到其相邻顶点的距离有没有可能更短。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNgy1gxa96tjyh8j319a0hu75r.jpg",alt:"",loading:"lazy"}})]),t._v(" "),a("p",[t._v("这个时候还没确定的顶点中，最短距离的顶点是 1 （距离是 3），因此源点 0 到顶点 1 的最短距离就是 3。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNgy1gxa96wrorrj317y0hq3zw.jpg",alt:"",loading:"lazy"}})]),t._v(" "),a("p",[t._v("现在我们更新出 3 出发的顶点，只有 3 -> 4 这条边（长度为 2）。现在到 3 的距离是 5，"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mn",[t._v("5")]),a("mo",[t._v("+")]),a("mn",[t._v("2")]),a("mo",[t._v(">")]),a("mn",[t._v("4")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("5 + 2 > 4")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.7278em","vertical-align":"-0.0833em"}}),a("span",{staticClass:"mord"},[t._v("5")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222em"}}),a("span",{staticClass:"mbin"},[t._v("+")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6835em","vertical-align":"-0.0391em"}}),a("span",{staticClass:"mord"},[t._v("2")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}}),a("span",{staticClass:"mrel"},[t._v(">")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2778em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6444em"}}),a("span",{staticClass:"mord"},[t._v("4")])])])]),t._v("，因此不更新 4 的距离。松弛操作没有找到更优的解。")]),t._v(" "),a("p",[t._v("现在没有确定的顶点中，距离最短的是 4 ，从 4 出发没有相邻的顶点。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNgy1gxa96zl5mwj31700hemyf.jpg",alt:"",loading:"lazy"}})]),t._v(" "),a("p",[t._v("剩下的一个顶点就是 3 ，因此最后我们确定了 3 的距离。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://tva1.sinaimg.cn/large/008i3skNgy1gxa97402odj316u0hm0u1.jpg",alt:"",loading:"lazy"}})]),t._v(" "),a("p",[t._v("现在我们再来看一下 Dijkstra 最初的想法，就很容易理解了。松弛操作没有选择的边，就是这个图例弯曲的边，它们一定不会是组成单源最短路径的边。")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5579e54bce14d2697685ec34d686e25~tplv-k3u1fbpfcp-zoom-1.image"}}),t._v(" "),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=l.exports}}]);