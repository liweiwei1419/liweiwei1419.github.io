(window.webpackJsonp=window.webpackJsonp||[]).push([[613],{746:function(t,_,r){"use strict";r.r(_);var a=r(1),e=Object(a.a)({},(function(){var t=this,_=t._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[t._v("北美讲题大纲")]),t._v(" "),_("h2",{attrs:{id:"线段树入门"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线段树入门"}},[t._v("#")]),t._v(" 线段树入门")]),t._v(" "),_("p",[t._v("时间：2020 年 6 月 6 日")]),t._v(" "),_("ul",[_("li",[t._v("只介绍「线段树」基础知识，不做深入讨论；")]),t._v(" "),_("li",[t._v("参考资料：liuyubobobo 老师的 GitHub "),_("a",{attrs:{href:"https://github.com/liuyubobobo/Play-with-Data-Structures/tree/master/09-Segment-Tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("《玩转数据结构》代码仓库"),_("OutboundLink")],1),t._v("。")])]),t._v(" "),_("p",[t._v("为什么介绍线段树？谷歌公司要考，它思想简单，代码实现有一点复杂。")]),t._v(" "),_("hr"),t._v(" "),_("h2",{attrs:{id:"_1-前置知识-前缀和数组"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-前置知识-前缀和数组"}},[t._v("#")]),t._v(" 1. 前置知识：前缀和数组")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("preSum[i]")]),t._v(" 表示 "),_("code",[t._v("nums[0..i]")]),t._v(" 里全部元素的和（一个数代表了原始数组的一个前缀区间的和）；")]),t._v(" "),_("li",[t._v("前缀和数组，就是一堆前缀和，可以用于："),_("strong",[t._v("快速计算区间和")]),t._v("（查询区间和 O(1)O(1)O(1)）；")]),t._v(" "),_("li",[t._v("区间 "),_("code",[t._v("[i..j]")]),t._v(" 的和： "),_("code",[t._v("preSum[j] - preSum[i - 1]")]),t._v("。")])]),t._v(" "),_("hr"),t._v(" "),_("p",[t._v("Java 代码：")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("int len = nums.length;\n// 计算前缀和数组\nint[] preSum = new int[len + 1];\npreSum[0] = 0;\n\nfor (int i = 0; i < len; i++) {\n  preSum[i + 1] = preSum[i] + nums[i];\n}\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br"),_("span",{staticClass:"line-number"},[t._v("8")]),_("br")])]),_("ul",[_("li",[_("strong",[t._v("缺点：前缀和数组，在有更新需求的前提下，不能高效地工作。")])])]),t._v(" "),_("hr"),t._v(" "),_("h2",{attrs:{id:"_2-线段树"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-线段树"}},[t._v("#")]),t._v(" 2. 线段树")]),t._v(" "),_("h3",{attrs:{id:"_2-1-线段树的用途"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-线段树的用途"}},[t._v("#")]),t._v(" 2.1 线段树的用途")]),t._v(" "),_("p",[t._v("线段树只回答了以下两个问题，不回答区间里有「删除」和「添加」操作的场景。")]),t._v(" "),_("ul",[_("li",[t._v("区间和查询")]),t._v(" "),_("li",[t._v("单点（区间）更新")])]),t._v(" "),_("hr"),t._v(" "),_("h3",{attrs:{id:"_2-2-前缀和数组与线段树都是原始数组的预处理数组"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-前缀和数组与线段树都是原始数组的预处理数组"}},[t._v("#")]),t._v(" 2.2 前缀和数组与线段树都是原始数组的预处理数组")]),t._v(" "),_("ul",[_("li",[t._v("有了前缀和数组，就可以把原始数组丢弃了；")]),t._v(" "),_("li",[t._v("有了线段树（数组），也可以把原始数组丢弃了。")])]),t._v(" "),_("p",[t._v("可以认为都是对原始数组的预处理数组，把一些需要用到的值提前计算出来，思想：空间换时间。")]),t._v(" "),_("hr"),t._v(" "),_("h3",{attrs:{id:"_2-3-如何构建线段树、如何实现区间查询、如何实现区间更新"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-如何构建线段树、如何实现区间查询、如何实现区间更新"}},[t._v("#")]),t._v(" 2.3 如何构建线段树、如何实现区间查询、如何实现区间更新")]),t._v(" "),_("hr"),t._v(" "),_("h3",{attrs:{id:"_2-4-线段树总结-与已有知识的联系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-线段树总结-与已有知识的联系"}},[t._v("#")]),t._v(" 2.4 线段树总结（与已有知识的联系）")]),t._v(" "),_("ul",[_("li",[t._v("线段树一定是二叉树，是平衡二叉树，最后一层不满；")]),t._v(" "),_("li",[t._v("线段树不是完全二叉树、更不是满二叉树；")]),t._v(" "),_("li",[_("strong",[t._v("树可以建立在数组上")]),t._v("：① 并查集； ② 堆 （完全二叉树、满二叉树）；")]),t._v(" "),_("li",[t._v("后序遍历构建二叉树；")]),t._v(" "),_("li",[t._v("递归、分治、深度优先遍历；")]),t._v(" "),_("li",[t._v("前缀和预处理的思路是：线性结构；线段树预处理的思路是：树结构。")])]),t._v(" "),_("hr"),t._v(" "),_("h3",{attrs:{id:"_2-5-练习"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-练习"}},[t._v("#")]),t._v(" 2.5 练习")]),t._v(" "),_("ul",[_("li",[t._v("「力扣」第 307 题： "),_("a",{attrs:{href:"https://leetcode-cn.com/problems/range-sum-query-mutable/",target:"_blank",rel:"noopener noreferrer"}},[t._v("区域和检索 - 数组可修改"),_("OutboundLink")],1),t._v("；")]),t._v(" "),_("li",[t._v("其它「力扣」上标签为「线段树」（segment-tree）的问题。")])]),t._v(" "),_("hr"),t._v(" "),_("h3",{attrs:{id:"_2-6-扩展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-扩展"}},[t._v("#")]),t._v(" 2.6 扩展")]),t._v(" "),_("ul",[_("li",[t._v("区间更新：懒加载策略；")]),t._v(" "),_("li",[t._v("树状数组（回答前缀和、单点（区间）更新）")]),t._v(" "),_("li",[t._v("线段树 >= 树状数组（binary-indexed-tree）")])])])}),[],!1,null,null,null);_.default=e.exports}}]);