(window.webpackJsonp=window.webpackJsonp||[]).push([[580],{781:function(t,v,_){"use strict";_.r(v);var s=_(1),r=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"空间换时间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#空间换时间"}},[t._v("#")]),t._v(" 空间换时间")]),t._v(" "),v("p",[t._v("由于求解的过程会遇到大量重复的子问题，我们需要记录下来，这是「"),v("strong",[t._v("空间换时间")]),t._v("」的思想。")]),t._v(" "),v("h2",{attrs:{id:"穷举-枚举、遍历"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#穷举-枚举、遍历"}},[t._v("#")]),t._v(" 穷举（枚举、遍历）")]),t._v(" "),v("p",[t._v("由于需要解决一个问题的 "),v("strong",[t._v("所有")]),t._v(" 子问题，这是「"),v("strong",[t._v("穷举")]),t._v("」的思想。大家可以百度或者谷歌一下，穷举法看起来「笨笨的」，但是它确实很有用。")]),t._v(" "),v("p",[t._v("「维基百科」上说：数字计算机的普及大大提升了穷举法的易用性。我是这么理解的，人类不擅长的就是干简单重复的事情，但是计算机擅长呀。我们利用了计算机高效、准确的计算能力，帮助我们完成了很多计算任务。")]),t._v(" "),v("p",[t._v("所以，其实「动态规划」"),v("strong",[t._v("没有为一个问题设计专门的解决方案")]),t._v("，它就是一个个傻傻地求解所有可能遇到的情况，有些特定问题下会遇到剪枝，大家在做题的过程中可以留意一下。")]),t._v(" "),v("p",[t._v("那么，"),v("strong",[t._v("什么算法是为一个问题设计了专门的解决方案呢")]),t._v("？答案是：贪心算法呀！贪心算法充分挖掘了一个问题的特点，使得求解问题的过程只需要 "),v("strong",[t._v("做出在当前看来是最好的选择，而不用考虑其它子问题，并且每个子问题只会遇到一次")]),t._v("，求解问题的过程需要记录的变量与问题的规模无关。")]),t._v(" "),v("p",[t._v("因此我们会在一些学习材料中看到："),v("strong",[t._v("贪心算法没有套路，一题一个样儿")]),t._v("。")])])}),[],!1,null,null,null);v.default=r.exports}}]);