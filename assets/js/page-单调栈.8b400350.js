(window.webpackJsonp=window.webpackJsonp||[]).push([[523],{968:function(e,t,r){"use strict";r.r(t);var n=r(1),o=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{staticClass:"custom-block info"},[t("p",{staticClass:"custom-block-title"},[e._v("重点概括")]),e._v(" "),t("p",[e._v("「单调栈」就是普通的栈，可以使用「单调栈」的问题都需要符合「后进先出」的规律，分析出「后进先出」是关键的，「单调」只是题目设计恰好符合的规律。")])]),e._v(" "),t("p",[e._v("「力扣」单调栈："),t("a",{attrs:{href:"https://leetcode-cn.com/tag/monotonic-stack/problemset/",target:"_blank",rel:"noopener noreferrer"}},[e._v("题单"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"分析「单调栈」问题的思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分析「单调栈」问题的思路"}},[e._v("#")]),e._v(" 分析「单调栈」问题的思路")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("暴力解法，暴力解法的缺点是通常都是时间复杂度很高，空间复杂度很低，每一次计算都没有记住什么，暴力解法做了很多重复工作；")])]),e._v(" "),t("li",[t("p",[e._v("分析出后进先出，所以用「栈」；")]),e._v(" "),t("p",[e._v("说明：栈是一种缓存，恰恰好有些场景就是后进先出。分析出后进先出，一般都是从暴力解法来的。")])]),e._v(" "),t("li",[t("p",[e._v("分析出维护站内单调性的原因；")])]),e._v(" "),t("li",[t("p",[e._v("栈内一般存下标；")])]),e._v(" "),t("li",[t("p",[e._v("多做题、思考、总结。")])])]),e._v(" "),t("p",[e._v("单调栈的问题很有局限性，如果看到求左边第 1 个，右边第 1 个，大概就是单调栈。可以认为这一类问题其实就是人为设计出来的，让你维护栈内元素的单调性去做。")]),e._v(" "),t("h2",{attrs:{id:"利用「单调栈」的单调性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用「单调栈」的单调性"}},[e._v("#")]),e._v(" 利用「单调栈」的单调性")]),e._v(" "),t("p",[e._v("利用「单调栈」的单调性能找到：")]),e._v(" "),t("ul",[t("li",[e._v("出栈元素左边第一个大于（等于）当前元素的位置；")]),e._v(" "),t("li",[e._v("出栈元素左边第一个小于（等于）当前元素的位置；")]),e._v(" "),t("li",[e._v("找右边第一个大于（等于）当前；如果看到解决问题需要有这种需求的，试试看，用栈，往保持栈单调那个方向去思考，或许就能解决了。")])]),e._v(" "),t("h2",{attrs:{id:"单调栈典型问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单调栈典型问题"}},[e._v("#")]),e._v(" 单调栈典型问题")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("序号")]),e._v(" "),t("th",[e._v("题目")]),e._v(" "),t("th",[e._v("题解")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("1")]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/daily-temperatures/",target:"_blank",rel:"noopener noreferrer"}},[e._v("739. 每日温度（中等）"),t("OutboundLink")],1)]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/daily-temperatures/solution/cheng-xu-yuan-de-zi-wo-xiu-yang-739-daily-temperat/",target:"_blank",rel:"noopener noreferrer"}},[e._v("【程序员的自我修养】739. Daily Temperatures"),t("OutboundLink")],1),e._v("（我看这篇题解学会的）、"),t("a",{attrs:{href:"https://leetcode-cn.com/problems/daily-temperatures/solution/bao-li-jie-fa-dan-diao-zhan-by-liweiwei1419/",target:"_blank",rel:"noopener noreferrer"}},[e._v("暴力解法 + 单调栈"),t("OutboundLink")],1)])]),e._v(" "),t("tr",[t("td",[e._v("2")]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/next-greater-element-i/",target:"_blank",rel:"noopener noreferrer"}},[e._v("496. 下一个更大元素 I（简单）"),t("OutboundLink")],1)]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/next-greater-element-i/solution/bao-li-jie-fa-dan-diao-zhan-by-liweiwei1419-2/",target:"_blank",rel:"noopener noreferrer"}},[e._v("暴力解法、单调栈"),t("OutboundLink")],1)])]),e._v(" "),t("tr",[t("td",[e._v("3")]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/next-greater-element-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("503. 下一个更大元素 II（中等）"),t("OutboundLink")],1)]),e._v(" "),t("td",[e._v("（我暂时没有写）")])]),e._v(" "),t("tr",[t("td",[e._v("4")]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/online-stock-span/",target:"_blank",rel:"noopener noreferrer"}},[e._v("901. 股票价格跨度（中等）"),t("OutboundLink")],1)]),e._v(" "),t("td",[t("a",{attrs:{href:"https://blog.csdn.net/lw_power/article/details/103957702",target:"_blank",rel:"noopener noreferrer"}},[e._v("LeetCode 第 901 题：股票价格跨度（单调栈）"),t("OutboundLink")],1)])]),e._v(" "),t("tr",[t("td",[e._v("5")]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/",target:"_blank",rel:"noopener noreferrer"}},[e._v("84. 柱状图中最大的矩形（困难）"),t("OutboundLink")],1)]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/bao-li-jie-fa-zhan-by-liweiwei1419/",target:"_blank",rel:"noopener noreferrer"}},[e._v("暴力解法、栈（哨兵技巧）"),t("OutboundLink")],1)])]),e._v(" "),t("tr",[t("td",[e._v("6")]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"}},[e._v("42. 接雨水（困难）"),t("OutboundLink")],1)]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/bao-li-jie-fa-zhan-by-liweiwei1419/",target:"_blank",rel:"noopener noreferrer"}},[e._v("暴力解法、栈（哨兵技巧）"),t("OutboundLink")],1)])]),e._v(" "),t("tr",[t("td",[e._v("7")]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-k-digits/",target:"_blank",rel:"noopener noreferrer"}},[e._v("402. 移掉 K 位数字"),t("OutboundLink")],1)]),e._v(" "),t("td")])])]),e._v(" "),t("p",[e._v("「力扣」第 84、42、739、496、316、901、402、581 题。还有 962 和 1124（不知名网友提供）。\n下面列出了我学习单调栈做过的问题，供大家参考。")]),e._v(" "),t("h2",{attrs:{id:"数据结构是缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构是缓存"}},[e._v("#")]),e._v(" 数据结构是缓存")]),e._v(" "),t("p",[t("strong",[e._v("数据结构可以认为是一种缓存")]),e._v("，是「空间换时间」思想的体现，恰当的数据结构可以帮助我们高效地处理数据，所谓恰当，是指「针对问题场景」，使用了合适的数据结构；")]),e._v(" "),t("ul",[t("li",[e._v("「栈」符合「后进先出」；")]),e._v(" "),t("li",[e._v("「队列」符合「先进先出」；")]),e._v(" "),t("li",[e._v("「哈希表」有快速存取数据的特点；")]),e._v(" "),t("li",[e._v("「二分搜索树」（红黑树、B 树系列）维护了数据的先后关系，还能得到一个数据的上下界；")]),e._v(" "),t("li",[e._v("「Trie」（字典树）专门用于处理字符串的问题；")]),e._v(" "),t("li",[e._v("「并查集」用于处理不相交集合的动态连接问题；")]),e._v(" "),t("li",[e._v("「线段树」用于处理区间和；")]),e._v(" "),t("li",[e._v("「树状数组」用于处理前缀和；")]),e._v(" "),t("li",[e._v("「优先队列」用于处理有动态添加数组且需要获得最值的场景；")]),e._v(" "),t("li",[e._v("「单调队列」「单调栈」。")])]),e._v(" "),t("h2",{attrs:{id:"学习建议"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#学习建议"}},[e._v("#")]),e._v(" 学习建议")]),e._v(" "),t("ul",[t("li",[e._v("先理解「暴力解法」（Brute Force），暴力解法通常是不占空间的，挨个去算，每一个数据的计算都没有为下一个数据的计算留下些什么")]),e._v(" "),t("li",[e._v("学习这些数据结构，或者说使用这些数据结构的时候，要清楚，对数据的增删改查的意义是什么？")]),e._v(" "),t("li",[t("strong",[e._v("画图（拿起纸笔，把思路讲清楚）")]),e._v("：11、42、84，都是画图（物理现象）才能搞清楚思路和设计算法流程的问题；")]),e._v(" "),t("li",[e._v("拿一般化的例子（研究算法思路）和特殊例子研究（算法细节 base case、corner case）面对 corner case 可能得用哨兵优化（单链表问题）；")]),e._v(" "),t("li",[e._v("认真调试代码。")])]),e._v(" "),t("h2",{attrs:{id:"视频题解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频题解"}},[e._v("#")]),e._v(" 视频题解")]),e._v(" "),t("p",[e._v("使用「栈」解决的问题，需要我们通过具体例子，发现解决它们正好符合「后进先出」的规律：")]),e._v(" "),t("ul",[t("li",[e._v("把暂时还不能确定结果的数据放入栈，把可以确定结果的数据从栈中拿出；")]),e._v(" "),t("li",[e._v("很多数据结构恰好应用于这种「动态」处理问题的场景，而发挥出它们的应用价值。")])]),e._v(" "),t("p",[e._v("掌握下面这两个问题，离不开对具体例子的研究，进而归纳出一般规律。")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("题目链接")]),e._v(" "),t("th",[e._v("力扣")]),e._v(" "),t("th",[e._v("B 站")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/",target:"_blank",rel:"noopener noreferrer"}},[e._v("84. 柱状图中最大的矩形（困难）"),t("OutboundLink")],1)]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/zhu-zhuang-tu-zhong-zui-da-de-ju-xing-by-leetcode-/",target:"_blank",rel:"noopener noreferrer"}},[e._v("力扣"),t("OutboundLink")],1)]),e._v(" "),t("td",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV16D4y1D7ed",target:"_blank",rel:"noopener noreferrer"}},[e._v("B 站"),t("OutboundLink")],1)])]),e._v(" "),t("tr",[t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicate-letters/",target:"_blank",rel:"noopener noreferrer"}},[e._v("316. 去除重复字母（中等）"),t("OutboundLink")],1)]),e._v(" "),t("td",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicate-letters/solution/qu-chu-zhong-fu-zi-mu-by-leetcode-soluti-vuso/",target:"_blank",rel:"noopener noreferrer"}},[e._v("力扣"),t("OutboundLink")],1)]),e._v(" "),t("td",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV1Tz4y167pC",target:"_blank",rel:"noopener noreferrer"}},[e._v("B 站"),t("OutboundLink")],1)])])])]),e._v(" "),t("p",[e._v("「栈」最为广泛的一种应用就是作为「递归」「深度优先遍历」「分治算法」的数据结构支持。")])])}),[],!1,null,null,null);t.default=o.exports}}]);