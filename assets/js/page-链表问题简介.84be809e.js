(window.webpackJsonp=window.webpackJsonp||[]).push([[623],{937:function(e,r,t){"use strict";t.r(r);var n=t(1),o=Object(n.a)({},(function(){var e=this,r=e._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("p",[e._v("解决链表的问题常见的技巧有：")]),e._v(" "),r("ul",[r("li",[e._v("1、使用递归函数，避免复杂的更改指针变量指向操作，使得求解问题变得简单。\n"),r("ul",[r("li",[e._v("「力扣」第 206 题："),r("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list",target:"_blank",rel:"noopener noreferrer"}},[e._v("反转链表"),r("OutboundLink")],1),e._v("；")]),e._v(" "),r("li",[e._v("「力扣」第 24 题："),r("a",{attrs:{href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs",target:"_blank",rel:"noopener noreferrer"}},[e._v("两两交换链表中的节点"),r("OutboundLink")],1),e._v("；")]),e._v(" "),r("li",[e._v("「力扣」第 25 题："),r("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-nodes-in-k-group",target:"_blank",rel:"noopener noreferrer"}},[e._v("K 个一组翻转链表"),r("OutboundLink")],1),e._v("；")]),e._v(" "),r("li",[e._v("「力扣」第 328 题："),r("a",{attrs:{href:"https://leetcode-cn.com/problems/odd-even-linked-list",target:"_blank",rel:"noopener noreferrer"}},[e._v("奇偶链表"),r("OutboundLink")],1),e._v("；")]),e._v(" "),r("li",[e._v("「力扣」第 203 题："),r("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-linked-list-elements/",target:"_blank",rel:"noopener noreferrer"}},[e._v("移除链表元素"),r("OutboundLink")],1),e._v("；")]),e._v(" "),r("li",[e._v("「力扣」第 21 题："),r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[e._v("合并两个有序链表"),r("OutboundLink")],1),e._v("。")])])]),e._v(" "),r("li",[e._v("2、设置「虚拟头结点」，避免对链表第 1 个结点做单独讨论，这个思想在数组里我们见过，叫「哨兵」；\n"),r("ul",[r("li",[e._v("「力扣」第 2 题："),r("a",{attrs:{href:"https://leetcode-cn.com/problems/add-two-numbers",target:"_blank",rel:"noopener noreferrer"}},[e._v("两数相加"),r("OutboundLink")],1),e._v("；")]),e._v(" "),r("li",[e._v("「力扣」第 82 题："),r("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/",target:"_blank",rel:"noopener noreferrer"}},[e._v("删除排序链表中的重复元素 II"),r("OutboundLink")],1),e._v("。")])])]),e._v(" "),r("li",[e._v("3、使用「快慢指针」，本题就是。确切地说，叫「同步指针」可能更好一些；")]),e._v(" "),r("li",[e._v("4、为链表编写测试函数，进行调试（在下面的参考代码中有），主要是：\n"),r("ul",[r("li",[e._v("从数组得到一个链表；")]),e._v(" "),r("li",[e._v("根据当前结点打印当前结点以及后面的结点。\n这两个方法可以非常方便地帮助我们调试关于链表的程序。")])])])]),e._v(" "),r("p",[e._v("大家还可以在「力扣」的新手场："),r("a",{attrs:{href:"https://leetcode-cn.com/explore/learn/card/linked-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("「探索」"),r("OutboundLink")],1),e._v(" 板块里，学习链表的相关知识和问题。「力扣」上的链表问题，和我们在教科书里学习的链表是有一点点不一样的，「力扣」的链表是以结点类 "),r("code",[e._v("ListNode")]),e._v(" 为中心进行编程。而一般教科书上则是将 "),r("code",[e._v("ListNode")]),e._v(" 作为链表的内部类进行编程，差别就是这些。其它处理链表问题的技巧是完全一样的。")]),e._v(" "),r("p",[r("strong",[e._v("打草稿很重要")]),e._v("：链表问题在「力扣」上是相对较少，"),r("strong",[e._v("并且题目类型和解题技巧相对固定的问题")]),e._v("，相信通过刷题和总结，我们是可以把链表问题全部掌握的。")]),e._v(" "),r("p",[e._v("并且思考链表问题的第 1 步，和「回溯算法」一样，绝大多数时候在草稿纸上写写画画就能得到解决链表问题的办法，特别是在链表中做一些更改指针变量指向操作的问题。")]),e._v(" "),r("p",[r("strong",[e._v("注意")]),e._v("：这里要注意一个细节：题目要求：「两个中间结点的时候，返回第二个中间结点」。此时可以在草稿纸上写写画画，就拿自己的左右手的两根指头同步移动，可以得出：快指针可以前进的条件是："),r("strong",[e._v("当前快指针和当前快指针的下一个结点都非空")]),e._v("。")]),e._v(" "),r("p",[e._v("在有些问题，例如「力扣」第 148 题："),r("a",{attrs:{href:"https://leetcode-cn.com/problems/sort-list/",target:"_blank",rel:"noopener noreferrer"}},[e._v("排序链表"),r("OutboundLink")],1),e._v("，是需要来到链表的第一个中间结点，然后切断链表，这时代码就得做小的调整。具体是怎么写的，不能靠猜，依然是要在纸上模拟一下这个「快慢指针同步走」的过程，就很清楚了（不过第 148 题的本来意思不是让我们从中间二分递归去做）。")])])}),[],!1,null,null,null);r.default=o.exports}}]);