(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{859:function(t,a,s){"use strict";s.r(a);var v=s(1),i=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"有负权边的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有负权边的情况"}},[t._v("#")]),t._v(" 有负权边的情况")]),t._v(" "),a("p",[t._v("有负权边的情况需要使用 Bellman-Ford 算法，Bellman-Ford 算法有一个基于队列的优化算法，叫 Shortest Path Faster Algorithm（SPFA），在《算法（第 4 版）》这本书上有介绍。")]),t._v(" "),a("p",[t._v("以后我们有机会再和大家做总结。")]),t._v(" "),a("h2",{attrs:{id:"图论知识体系阶段总结-不全面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图论知识体系阶段总结-不全面"}},[t._v("#")]),t._v(" 图论知识体系阶段总结（不全面）")]),t._v(" "),a("h3",{attrs:{id:"最小生成树算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最小生成树算法"}},[t._v("#")]),t._v(" 最小生成树算法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("理论基础")]),t._v(" "),a("th",[t._v("算法思想")]),t._v(" "),a("th",[t._v("数据结构")]),t._v(" "),a("th",[t._v("步骤")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Prim")]),t._v(" "),a("td",[t._v("切分定理")]),t._v(" "),a("td",[t._v("动态规划")]),t._v(" "),a("td",[t._v("优先队列")]),t._v(" "),a("td",[t._v("从 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6444em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 个点开始，找到 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("v")]),a("mo",[t._v("−")]),a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("v - 1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[t._v("v")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222em"}}),a("span",{staticClass:"mbin"},[t._v("−")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6444em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 条边，不能形成环（不在树中）。")])]),t._v(" "),a("tr",[a("td",[t._v("Kruskal")]),t._v(" "),a("td",[t._v("切分定理")]),t._v(" "),a("td",[t._v("贪心")]),t._v(" "),a("td",[t._v("并查集")]),t._v(" "),a("td",[t._v("从最短的边开始，一条一条添加，如果形成环，就丢弃。")])])])]),t._v(" "),a("h3",{attrs:{id:"最短路径算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最短路径算法"}},[t._v("#")]),t._v(" 最短路径算法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}}),t._v(" "),a("th",[t._v("理论基础")]),t._v(" "),a("th",[t._v("用途")]),t._v(" "),a("th",[t._v("要求")]),t._v(" "),a("th",[t._v("算法思想")]),t._v(" "),a("th",[t._v("步骤")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Dijkstra")]),t._v(" "),a("td",[t._v("松弛操作")]),t._v(" "),a("td",[t._v("求单源最短路径")]),t._v(" "),a("td",[t._v("不能有负权边")]),t._v(" "),a("td",[t._v("动态规划")]),t._v(" "),a("td",[t._v("1、找最短；2、确定一个解；3、更新。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Bellman-Ford")]),t._v(" "),a("td",[t._v("松弛操作")]),t._v(" "),a("td",[t._v("可以检测负权环，跑一遍可以得到负权环。")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("动态规划")]),t._v(" "),a("td",[t._v("对所有的边进行 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[a("semantics",[a("mrow",[a("mi",[t._v("v")]),a("mo",[t._v("−")]),a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("v - 1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6667em","vertical-align":"-0.0833em"}}),a("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.03588em"}},[t._v("v")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222em"}}),a("span",{staticClass:"mbin"},[t._v("−")]),a("span",{staticClass:"mspace",staticStyle:{"margin-right":"0.2222em"}})]),a("span",{staticClass:"base"},[a("span",{staticClass:"strut",staticStyle:{height:"0.6444em"}}),a("span",{staticClass:"mord"},[t._v("1")])])])]),t._v(" 轮（最坏情况）松弛操作。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("Floyd")]),t._v(" "),a("td",[t._v("松弛操作")]),t._v(" "),a("td",[t._v("求多源最短路径。")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("动态规划")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[a("strong",[t._v("说明")]),t._v("：有负权环，对于求单源最短路径问题是没有意义的。")])])}),[],!1,null,null,null);a.default=i.exports}}]);