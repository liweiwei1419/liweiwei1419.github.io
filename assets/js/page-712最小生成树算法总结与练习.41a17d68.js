(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{865:function(t,r,e){"use strict";e.r(r);var a=e(1),n=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("p",[t._v("最小生成树的 Kruskal 算法和 Prim 算法都基于「切分定理」，我们再回顾一下：「任意横切边的最短边一定数据最小生成树」。")]),t._v(" "),r("ul",[r("li",[t._v("Kruskal 算法从最短的边，一条一条开始考虑，如果新考虑的边与已经考虑的边形成环，就抛弃，进而考虑下一条边。")]),t._v(" "),r("li",[t._v("Prim 算法可以从任意一个顶点开始，形成切分，考虑最短的横切边，将还未考虑进来的边依次考虑进来，最后切分消失的时候，就找到了最小生成树。")])]),t._v(" "),r("h2",{attrs:{id:"「力扣」上关于「最小生成树」的练习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#「力扣」上关于「最小生成树」的练习"}},[t._v("#")]),t._v(" 「力扣」上关于「最小生成树」的练习")]),t._v(" "),r("ul",[r("li",[t._v("「力扣」第 1135 题：最低成本联通所有城市；")]),t._v(" "),r("li",[t._v("「力扣」第 1168 题：水资源分配优化；")]),t._v(" "),r("li",[t._v("「力扣」第 1489 题："),r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("找到最小生成树里的关键边和伪关键边"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);r.default=n.exports}}]);